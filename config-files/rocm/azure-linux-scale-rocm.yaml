## Note to access the cluster where this is currently deployed and via azure cli: 
# az login
# az account set --subscription "AMD-GIS_PRD-Enterprise"
# az aks get-credentials --admin --name SaiScale --resource-group pdue-nod-ai-rg
#
## To export:
# helm get values azure-linux-scale-rocm -n arc-rocm-linux-runners -o yaml > cur_azure-linux-scale-rocm.yaml

githubConfigSecret: rocm-secret
githubConfigUrl: https://github.com/ROCm
minRunners: 1
template:
  spec:
    initContainers:
      - name: init-dind-externals
        image: ghcr.io/saienduri/ghascale:main
        imagePullPolicy: Always
        command:
          ["cp", "-r", "/home/runner/externals/.", "/home/runner/tmpDir/"]
        volumeMounts:
          - name: dind-externals
            mountPath: /home/runner/tmpDir
      - name: dind
        image: ghcr.io/saienduri/dind:main
        restartPolicy: Always
        command: ["sh", "-c"]
        args:
          - |
            dockerd --host=unix:///var/run/docker.sock --group=${DOCKER_GROUP_GID} &
            until docker info >/dev/null 2>&1; do sleep 5; done
            tail -f /dev/null
        env:
          - name: DOCKER_GROUP_GID
            value: "123"
        securityContext:
          privileged: true
        volumeMounts:
          - name: work
            mountPath: /home/runner/_work
          - name: dind-sock
            mountPath: /var/run
          - name: dind-externals
            mountPath: /home/runner/externals
    containers:
      - name: runner
        image: ghcr.io/saienduri/ghascale:main
        imagePullPolicy: Always
        command:
          - /bin/sh
          - -c
          - |
            # Wait for Docker to be ready before starting runner
            echo "Waiting for docker..."
            until docker info >/dev/null 2>&1; do sleep 5; done
            /home/runner/run.sh
        resources:
          requests:
            cpu: 40000m
            memory: 50000Mi
        env:
          - name: DOCKER_HOST
            value: unix:///var/run/docker.sock
        volumeMounts:
          - name: work
            mountPath: /home/runner/_work
          - name: dind-sock
            mountPath: /var/run
          - name: aws-credentials
            mountPath: /runner/shared-data/credentials
            subPath: credentials
            readOnly: true
    volumes:
      - name: work
        emptyDir: {}
      - name: dind-sock
        emptyDir: {}
      - name: dind-externals
        emptyDir: {}
      - name: aws-credentials
        secret:
          secretName: aws-credentials
          items:
            - key: credentials
              path: credentials
